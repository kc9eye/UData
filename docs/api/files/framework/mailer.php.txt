<?php
/* This file is part of UData.
 * Copyright (C) 2019 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require_once(PHPMAILER_DIR.'/Exception.php');
require_once(PHPMAILER_DIR.'/OAuth.php');
require_once(PHPMAILER_DIR.'/POP3.php');
require_once(PHPMAILER_DIR.'/SMTP.php');
require_once(PHPMAILER_DIR.'/PHPMailer.php');

class Mailer {
    protected $config;

    public function __construct (Array $config) {
        $this->config = $config;
    }

    /**
     * Sends mail using given information in an array
     * 
     * This method is used to send mail. All the details 
     * of the mail being sent should be given in the array.
     * It is not possible to send mail as anyone other than the server with this method.     * 
     * @param Array $mail The mail array describing the mail to send. In the form    
     * ['to'=>string|array(string),'subject'=>string,'body'=>string,'attach=>['filepath',...]]
     * @return Boolean True on success, false otherwise.
     */
    public function sendMail (Array $mail) {
        try {
            $mailer = new PHPMailer(true);
            switch($this->config['mailer-type']) {
                case 'SMTP': $mailer->isSMTP(); break;
                case 'Mail': $mailer->isMail(); break;
                case 'Sendmail': $mailer->isSendmail(); break;
                default: $mailer->isSMTP(); break;
            }
            if ($this->config['mailer-SMTPAuth']) {
                $mailer->SMTPAuth = true;
                $mailer->Username = $this->config['mailer-username'];
                $mailer->Password = $this->config['mailer-password'];
                $mailer->SMTPSecure = $this->config['mailer-security'];
            }
            $mailer->Host = $this->config['mailer-host'];
            $mailer->Port = $this->config['mailer-port'];
            $mailer->setFrom($this->config['mailer-default-from-addr'], $this->config['mailer-default-from-name']);
            $mailer->Subject = $mail['subject'];
            $mailer->msgHTML($mail['body'], $this->config['template-root'].'/email/images');
            if (!empty($mail['attach'])) {
                foreach($mail['attach'] as $file) {
                    $mailer->addAttachment($file);
                }
            }
            if (is_array($mail['to'])) {
                $mailer->SMTPKeepAlive = true;
                foreach($mail['to'] as $address) $mailer->addAddress($address);
            }
            else 
                $mailer->addAddress($mail['to']);
            
            $mailer->send();
            $mailer->clearAddresses();
            $mailer->clearAttachments();
            return true;

        }
        catch (Exception $e) {
            // $mailer->smtp->reset();
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (\Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Wraps the given string in the given html email template
     * @param string $template The name of the template in `$config['template-root']` directory
     * @param string $wrap The string you want wrapped in the given template
     * @return string Returns the given string wrapped in the template
     */
    public function wrapInTemplate($template,$wrap) {
        try {
            $string = file_get_contents($this->config['template-root'].'/email/'.$template);
            $string .= $wrap;
            $string .= file_get_contents($this->config['template-root'].'/email/htmlclose.html');
            return $string;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }
}
